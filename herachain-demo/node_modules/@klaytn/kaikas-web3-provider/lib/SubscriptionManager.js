"use strict";
// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>
// Licensed under the Apache License, version 2.0
// This file is derived from coinbase-wallet-sdk/packages/wallet-sdk/src/provider/SubscriptionManager.ts (2022/08/01).
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionManager = void 0;
const PollingBlockTracker = require('eth-block-tracker');
const createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager');
const noop = () => { };
class SubscriptionManager {
    constructor(provider) {
        const blockTracker = new PollingBlockTracker({
            provider,
            pollingInterval: 15 * 1000,
            setSkipCacheFlag: true,
        });
        const { events, middleware } = createSubscriptionManager({
            blockTracker,
            provider,
        });
        this.events = events;
        this.subscriptionMiddleware = middleware;
    }
    handleRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            yield this.subscriptionMiddleware(request, result, noop, noop);
            return result;
        });
    }
    destroy() {
        this.subscriptionMiddleware.destroy();
    }
}
exports.SubscriptionManager = SubscriptionManager;
