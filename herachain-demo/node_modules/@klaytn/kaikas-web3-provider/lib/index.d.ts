import { Web3Provider, RequestArguments } from './Web3Provider';
import SafeEventEmitter from '@metamask/safe-event-emitter';
import { JSONRPCResponse, JSONRPCRequest } from './JSONRPC';
export declare type Callback<T> = (err: Error | null, result: T | null) => void;
export declare class KaikasWeb3Provider extends SafeEventEmitter implements Web3Provider {
    kaikasProvider: any;
    chainId: string;
    caver: any;
    private _addresses;
    private readonly _subscriptionManager;
    constructor(provider: any);
    enable(): Promise<string[]>;
    getChainId(): string;
    get isKaikas(): boolean;
    get connected(): boolean;
    supportsSubscriptions(): boolean;
    disconnect(): boolean;
    send(request: JSONRPCRequest): JSONRPCResponse;
    send(request: JSONRPCRequest[]): JSONRPCResponse[];
    send(request: JSONRPCRequest, callback: Callback<JSONRPCResponse>): void;
    send(request: JSONRPCRequest[], callback: Callback<JSONRPCResponse[]>): void;
    send<T = any>(method: string, params?: any[] | any): Promise<T>;
    sendAsync(request: JSONRPCRequest, callback: Callback<JSONRPCResponse>): void;
    sendAsync(request: JSONRPCRequest[], callback: Callback<JSONRPCResponse[]>): void;
    request<T>(args: RequestArguments): Promise<T>;
    private _send;
    private _sendAsync;
    private _sendRequest;
    private _sendRequestAsync;
    private _handleSubscriptionMethods;
    private _sendMultipleRequestsAsync;
    private _handleSynchronousMethods;
    private _eth_accounts;
    private _eth_chainId;
    private _net_version;
    private _handleAsynchronousMethods;
    private kaikasSendAsync;
    private _eth_call;
    private _eth_getGasPrice;
    private _wallet_watchAsset;
    private watchAsset;
    private _personal_sign;
    private _eth_sendTransaction;
    private _eth_signTransaction;
    private _eth_sendRawTransaction;
    private _eth_getTransactionReceipt;
    private _personal_ecRecover;
    private _eth_blockNumber;
    private _eth_getBlockByNumber;
}
