[{"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/index.js":"1","/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/reportWebVitals.js":"2","/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/App.js":"3","/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/config.js":"4","/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/RecordComponent.js":"5","/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/context.js":"6","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/index.js":"7","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/App.js":"8","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/reportWebVitals.js":"9","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/RecordComponent.js":"10","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/context.js":"11","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/config.js":"12"},{"size":964,"mtime":1658192931707,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1658192931708,"results":"15","hashOfConfig":"14"},{"size":12915,"mtime":1660779022575,"results":"16","hashOfConfig":"14"},{"size":312,"mtime":1660096258106,"results":"17","hashOfConfig":"14"},{"size":3800,"mtime":1660778782858,"results":"18","hashOfConfig":"14"},{"size":89,"mtime":1658192931702,"results":"19","hashOfConfig":"14"},{"size":964,"mtime":1661171423017,"results":"20","hashOfConfig":"21"},{"size":13015,"mtime":1675221368924,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1661171423018,"results":"23","hashOfConfig":"21"},{"size":3800,"mtime":1661171422980,"results":"24","hashOfConfig":"21"},{"size":89,"mtime":1661171423005,"results":"25","hashOfConfig":"21"},{"size":312,"mtime":1675222228671,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1c7f5pj",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1msm3mc",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/index.js",[],["55","56"],"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/reportWebVitals.js",[],"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/App.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71"],"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/config.js",[],"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/RecordComponent.js",["72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"/Users/austinhatch/Documents/GitHub/Heracoin/herachain-demo/src/context.js",[],"/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/index.js",[],["88","89"],"/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/App.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import './App.css';\nimport { ethers } from 'ethers'\n// import Caver from 'caver-js'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\n\nimport React, { useState, useRef, useEffect, useContext } from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport { KaikasWeb3Provider } from \"@klaytn/kaikas-web3-provider\"\n\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { AccountContext } from './context';\nimport { databaseAddress, ownerAddress } from './config'\n\nimport heralogo from './img/logo-hera.png'\nimport metamasklogo from './img/logo-metamask.png'\n\nimport EMRContractDatabase from './artifacts/contracts/EMRContractDatabase.sol/EMRContractDatabase.json'\nimport EMRStorageContract from './artifacts/contracts/EMRStorageContract.sol/EMRStorageContract.json'\n\nimport { Interface } from 'ethers/lib/utils';\nimport { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';\nimport RecordComponent from './RecordComponent';\n\n\nconst BAOBAB_TESTNET_RPC_URL = 'https://api.baobab.klaytn.net:8651/'\nconst MUMBAI_TESTNET_RPC_URL = 'https://endpoints.omniatech.io/v1/matic/mumbai/public'\n// const caver = new Caver(BAOBAB_TESTNET_RPC_URL)\n\n\n//IPFS endpoint\nconst projectId = '2DBkdZ0RLVleEQgaqcR5VNoaO4d'\nconst projectSecret = 'aebbd2d6d63d774c249c32d27c2bb4c4'\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\nconst client = ipfsHttpClient({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https',\n    headers: {\n        authorization: auth,\n    },\n});\n\n//Initial Empty State of Medical Record\nconst initialState = { description: '', recordType: '', recordDate: '' }\n\nexport class Record {\n    constructor(num, id, type, date, image_hash, data_hash) {\n        this.num = num;\n        this.id = id;\n        this.type = type;\n        this.date = date;\n        this.image_hash = image_hash;\n        this.data_hash = data_hash;\n    }\n}\n\nfunction App({ Component, pageProps }) {\n    const [account, setAccount] = useState(null)\n    const [file, setFile] = useState(null)\n    const [record, setRecord] = useState(initialState)\n    const { description, recordType, recordDate } = record\n    const [ownedRecords, setOwnedRecords] = useState([])\n    const [provider, setProvider] = useState(null)\n    const [loaded, setLoaded] = useState(false)\n\n    function onChange(e) {\n        setRecord(() => ({ ...record, [e.target.name]: e.target.value }))\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            /* delay rendering buttons until dynamic import is complete */\n            setLoaded(true)\n        }, 500)\n    }, [])\n\n    async function getWeb3Modal() {\n        const web3Modal = new Web3Modal({\n            cacheProvider: false,\n            network: \"boabab\",\n            networkId: 1001,\n            chain: \"Klaytn\",\n            chainId: 1001,\n            providerOptions: {\n                walletconnect: {\n                    package: WalletConnectProvider,\n                    options: {\n                        infuraId: \"your-infura-id\"\n                    },\n                    kaikas: {\n                        package: KaikasWeb3Provider,\n                    }\n                },\n            },\n        })\n        return web3Modal\n    }\n\n    async function checkForChain() {\n        const provider = window.ethereum;\n        if (!provider) {\n            console.log(\"Metamask is not installed, please install!\");\n            return\n        }\n        try {\n            await provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: '80001' }],\n            });\n            console.log(\"You have succefully switched to Polygon Mumbai Test network\")\n            return\n        } catch (switchError) {\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                console.log(\"This network is not available in your metamask, please add it\")\n            }\n            console.log(\"Failed to switch to the network\")\n        }\n        try {\n            await provider.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '80001',\n                        chainName: 'Mumbai',\n                        rpcUrls: [MUMBAI_TESTNET_RPC_URL],\n                        nativeCurrency: { symbol: 'MATIC', decimals: 18 }\n                    }]\n            });\n        }\n        catch (addError) {\n            console.log(addError);\n        }\n    }\n\n    /* the connect function uses web3 modal to connect to the user's wallet */\n    async function connect() {\n        try {\n            await checkForChain()\n            const web3Modal = await getWeb3Modal()\n            const connection = await web3Modal.connect()\n            const provider = new ethers.providers.Web3Provider(connection)\n            const accounts = await provider.listAccounts()\n            setAccount(accounts[0])\n            getOwnedRecords()\n        } catch (err) {\n            console.log('error:', err)\n        }\n    }\n\n    async function saveImageToIpfs() {\n        /* save post metadata to ipfs */\n        try {\n            const added = await client.add(file)\n            return added.path\n        } catch (err) {\n            console.log('Could not upload image: ', err)\n        }\n    }\n\n    async function saveDataToIpfs() {\n        /* save post metadata to ipfs */\n        try {\n            const added = await client.add(JSON.stringify(record.description))\n            return added.path\n        } catch (err) {\n            console.log('Could not upload Data: ', err)\n        }\n    }\n\n    const convertToUnix = (date) => {\n        const dateFormat = new Date(date);\n        let unixTimestamp = Math.floor(dateFormat.getTime() / 1000)\n        return unixTimestamp\n    }\n\n\n    async function createNewRecord(e) {\n        /* saves post to ipfs then anchors to smart contract */\n        if (file == null) {\n            alert(\"Please upload a Medical Record Image to add to HeraChain\")\n            return\n        }\n        if (!recordType) {\n            alert(\"Please select a valid Record Type.\")\n            return\n        }\n        if (!recordDate) {\n            alert(\"Please provide a valid Record Date\")\n            return\n        }\n        const unix = convertToUnix(recordDate)\n\n        if (isNaN(unix)) {\n            alert(\"Please provide a valid Record Date\")\n            return\n        }\n\n        const image_hash = await saveImageToIpfs()\n        console.log(\"Image has been saved to \" + image_hash)\n        const data_hash = await saveDataToIpfs()\n        console.log(\"Data has been saved to \" + data_hash)\n        if (image_hash == undefined) {\n            alert(\"Unable to upload files. Please check your IPFS connection.\")\n            return\n        }\n        var success = await createEMR(image_hash, data_hash)\n        if (!success) {\n            alert(\"Unable to create an EMR on the blockchain. Please check that you have connected your wallet.\")\n            return\n        }\n        alert(\"Medical Record Successfully Added to HeraChain\")\n        setRecord(() => ({ description: '', recordType: '', recordDate: '' }))\n        document.getElementById(\"form\").reset();\n        setFile(null)\n        await getOwnedRecords()\n    }\n\n\n\n    async function createEMR(image_hash, data_hash) {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n            console.log(signer)\n            const contract = new ethers.Contract(databaseAddress, EMRContractDatabase.abi, signer)\n            console.log('contract: ', contract)\n            try {\n                const unixdate = convertToUnix(record.recordDate)\n                console.log(\"Record Date: \" + unixdate)\n                const val = await contract.createEMR(record.recordType, \"Active\", unixdate, image_hash, data_hash)\n                console.log('val: ', val)\n                return true;\n            } catch (err) {\n                console.log('Error: ', err)\n                return false;\n            }\n        }\n        return false;\n\n    }\n\n    function onFormChange(e) {\n        setRecord(() => ({ ...record, [e.target.name]: e.target.value }))\n    }\n\n    const getOwnedRecords = async () => {\n        console.log(\"Getting owned EMRs\")\n        setOwnedRecords([])\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const signer = provider.getSigner()\n        const databaseContract = new ethers.Contract(databaseAddress, EMRContractDatabase.abi, signer)\n        let emrStorageAddress = await databaseContract.getEMRStorageContract()\n        console.log(\"Storage: \" + emrStorageAddress)\n        const storageContract = new ethers.Contract(emrStorageAddress, EMRStorageContract.abi, signer);\n        let ownedRecs = await storageContract.getEMRIDs()\n        for (let j = 0; j < ownedRecs.length; j++) {\n            var rec = await storageContract.getEMR(ownedRecs[j])\n            let emr: Record = {\n                num: j + 1,\n                id: ownedRecs[j],\n                type: rec.record_type,\n                date: rec.record_date,\n                image_hash: rec.ipfs_image_hash,\n                data_hash: rec.ipfs_data_hash\n            }\n            setOwnedRecords(ownedRecords => [...ownedRecords, emr]);\n        }\n        console.log(ownedRecords)\n    }\n\n    const afterSubmission = async (event) => {\n        event.preventDefault();\n\n    }\n\n    useEffect(() => {\n        async function fetchEMRs() {\n            await getOwnedRecords()\n        }\n    }, [])\n\n    return (\n        <><link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\" /><div className=\"container\">\n            <center><img className=\"logo mt-40\" src={heralogo} alt=\"hera logo\" /><br />\n                <h2 className=\"hera-purple\">Hera Digital Documentation System</h2>\n            </center>\n            <center><img className=\"mt-20 mr-20\" src={metamasklogo} alt=\"metamask logo\" /><button className=\"metamask-btn mt-20\" onClick={connect}>Connect Metamask Wallet</button></center>\n            <center><h6 className=\"address-display\">Account: {account}</h6></center>\n\n            <div className=\"mt-20 col-md-6 col-sm-12 margin-zero\">\n\n                <h4 className=\"form-label hera-purple\">Upload a file</h4>\n\n                {/* <FileForm onSubmit={createEMR} /> */}\n                <form id=\"form\" onSubmit={afterSubmission}>\n                    <input className=\"form-control mt-20\" type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n\n                    <label className=\"form-label mt-20\">Description</label>\n                    <textarea name='description' className=\"form-control\" rows=\"3\" onChange={onFormChange} />\n\n                    <label className=\"form-label mt-20\">Record Type</label>\n                    <select className=\"form-select\" name='recordType' onChange={onFormChange}>\n                        <option selected value=\"\" >Record Type</option>\n                        <option value=\"Personal ID\">Personal ID</option>\n                        <option value=\"Health Report\">Health Report</option>\n                        <option value=\"Vaccination Report\">Vaccination Report</option>\n                    </select>\n\n                    <label className=\"form-label mt-20\">Record Date (MM/DD/YYYY)</label>\n\n                    <input className=\"form-control\" name='recordDate' type=\"text\" onChange={onFormChange} />\n\n                    <button type=\"submit\" className=\"btn btn-primary mt-20\" onClick={createNewRecord}>Submit</button>\n                </form>\n\n            </div>\n\n            <div className=\"mt-40 col-md-12\">\n                <h2 className=\"hera-purple\">Saved Records</h2>\n\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Record Date</th>\n                            <th scope=\"col\">Record Type</th>\n                            <th scope=\"col\">Description</th>\n                            <th scope=\"col\">Uploaded File</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {ownedRecords.map(function (record, key) {\n                            return <RecordComponent key={key} id={record.id} num={record.num} type={record.type} image_hash={record.image_hash} data_hash={record.data_hash} date={record.date} refresh={getOwnedRecords}></RecordComponent>\n                        })}\n                        { }\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"mt-40\"></div>\n        </div></>\n    );\n}\n\nexport default App;","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/reportWebVitals.js",[],"/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/RecordComponent.js",["105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import { Record } from './App.js';\nimport { ethers } from 'ethers'\nimport Caver from 'caver-js'\nimport App from './App.js'\nimport { create, get } from 'ipfs-http-client'\nimport { useState, useRef, useEffect } from 'react' // new\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { AccountContext } from './context';\nimport { databaseAddress, ownerAddress } from './config'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nimport EMRContractDatabase from './artifacts/contracts/EMRContractDatabase.sol/EMRContractDatabase.json'\nimport EMRStorageContract from './artifacts/contracts/EMRStorageContract.sol/EMRStorageContract.json'\n\nimport { Interface } from 'ethers/lib/utils';\nimport { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';\nimport AccordionItem from 'react-bootstrap/esm/AccordionItem.js';\n\n\nconst BAOBAB_TESTNET_RPC_URL = 'https://api.baobab.klaytn.net:8651/'\nconst caver = new Caver(BAOBAB_TESTNET_RPC_URL)\n\nexport default function RecordComponent(props) {\n    const [recordDate, setRecordDate] = useState()\n    const [recordType, setRecordType] = useState()\n    const [recordDescription, setRecordDescription] = useState()\n    const [recordImage, setRecordImage] = useState()\n    const recordId = props.id\n    const recordNum = props.num\n    const ipfsURI = 'https://heradigitalhealth.infura-ipfs.io/ipfs'\n\n\n\n    useEffect(() => {\n        setRecordDate(convertToDate(props.date))\n        setRecordType(props.type)\n        getStaticProps()\n    }, [])\n\n\n    function convertToDate(string) {\n        const t = parseInt(string)\n        const milliseconds = t * 1000\n        const dateObject = new Date(milliseconds)\n        const dateTimestamp = dateObject.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        })\n        // console.log(dateTimestamp)\n        return dateTimestamp\n    }\n\n    async function getStaticProps() {\n        const dataUrl = `${ipfsURI}/${props.data_hash}`\n        const response = await fetch(dataUrl)\n        const data = await response.json()\n        setRecordDescription(data)\n\n        const imageUrl = `${ipfsURI}/${props.image_hash}`\n        console.log(imageUrl)\n        setRecordImage(imageUrl)\n    }\n\n    async function removeRecord() {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const signer = provider.getSigner()\n        const databaseContract = new ethers.Contract(databaseAddress, EMRContractDatabase.abi, signer)\n        let emrStorageAddress = await databaseContract.getEMRStorageContract()\n        const storageContract = new ethers.Contract(emrStorageAddress, EMRStorageContract.abi, signer);\n        await storageContract.voidEMR(recordId)\n    }\n\n    return (\n        <tr>\n            <th scope=\"row\" name=\"num\">{recordNum}</th>\n            <td name=\"date\">{recordDate}</td>\n            <td name=\"type\"> {recordType} </td>\n            <td name=\"description\">{recordDescription}</td>\n            <td>\n                <div>\n                    <Accordion defaultActiveKey=\"1\">\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>View Record</Accordion.Header>\n                            <Accordion.Body>\n                                <img className=\"recordImage\" src={recordImage} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </div>\n            </td >\n            <td>\n                <Button className=\"removeRecord\" onClick={removeRecord}>X</Button>\n            </td>\n        </tr >\n\n    )\n}","/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/context.js",[],"/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/src/config.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":6,"column":27,"nodeType":"127","messageId":"128","endLine":6,"endColumn":33},{"ruleId":"125","severity":1,"message":"129","line":6,"column":46,"nodeType":"127","messageId":"128","endLine":6,"endColumn":56},{"ruleId":"125","severity":1,"message":"130","line":14,"column":10,"nodeType":"127","messageId":"128","endLine":14,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":15,"column":27,"nodeType":"127","messageId":"128","endLine":15,"endColumn":39},{"ruleId":"125","severity":1,"message":"132","line":23,"column":10,"nodeType":"127","messageId":"128","endLine":23,"endColumn":19},{"ruleId":"125","severity":1,"message":"133","line":24,"column":10,"nodeType":"127","messageId":"128","endLine":24,"endColumn":27},{"ruleId":"125","severity":1,"message":"134","line":29,"column":7,"nodeType":"127","messageId":"128","endLine":29,"endColumn":12},{"ruleId":"125","severity":1,"message":"135","line":63,"column":13,"nodeType":"127","messageId":"128","endLine":63,"endColumn":24},{"ruleId":"125","severity":1,"message":"136","line":65,"column":12,"nodeType":"127","messageId":"128","endLine":65,"endColumn":20},{"ruleId":"125","severity":1,"message":"137","line":65,"column":22,"nodeType":"127","messageId":"128","endLine":65,"endColumn":33},{"ruleId":"125","severity":1,"message":"138","line":66,"column":12,"nodeType":"127","messageId":"128","endLine":66,"endColumn":18},{"ruleId":"125","severity":1,"message":"139","line":68,"column":14,"nodeType":"127","messageId":"128","endLine":68,"endColumn":22},{"ruleId":"140","severity":1,"message":"141","line":205,"column":24,"nodeType":"142","messageId":"143","endLine":205,"endColumn":26},{"ruleId":"125","severity":1,"message":"144","line":280,"column":24,"nodeType":"127","messageId":"128","endLine":280,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":283,"column":8,"nodeType":"147","endLine":283,"endColumn":10,"suggestions":"148"},{"ruleId":"125","severity":1,"message":"149","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":16},{"ruleId":"125","severity":1,"message":"150","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":11},{"ruleId":"125","severity":1,"message":"151","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"152","line":5,"column":18,"nodeType":"127","messageId":"128","endLine":5,"endColumn":21},{"ruleId":"125","severity":1,"message":"126","line":6,"column":20,"nodeType":"127","messageId":"128","endLine":6,"endColumn":26},{"ruleId":"125","severity":1,"message":"153","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":17},{"ruleId":"125","severity":1,"message":"154","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":29},{"ruleId":"125","severity":1,"message":"130","line":9,"column":10,"nodeType":"127","messageId":"128","endLine":9,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":10,"column":27,"nodeType":"127","messageId":"128","endLine":10,"endColumn":39},{"ruleId":"125","severity":1,"message":"155","line":13,"column":8,"nodeType":"127","messageId":"128","endLine":13,"endColumn":12},{"ruleId":"125","severity":1,"message":"132","line":19,"column":10,"nodeType":"127","messageId":"128","endLine":19,"endColumn":19},{"ruleId":"125","severity":1,"message":"133","line":20,"column":10,"nodeType":"127","messageId":"128","endLine":20,"endColumn":27},{"ruleId":"125","severity":1,"message":"156","line":21,"column":8,"nodeType":"127","messageId":"128","endLine":21,"endColumn":21},{"ruleId":"125","severity":1,"message":"134","line":25,"column":7,"nodeType":"127","messageId":"128","endLine":25,"endColumn":12},{"ruleId":"145","severity":1,"message":"157","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":10,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":90,"column":33,"nodeType":"161","endLine":90,"endColumn":82},{"ruleId":"121","replacedBy":"162"},{"ruleId":"123","replacedBy":"163"},{"ruleId":"125","severity":1,"message":"126","line":6,"column":27,"nodeType":"127","messageId":"128","endLine":6,"endColumn":33},{"ruleId":"125","severity":1,"message":"129","line":6,"column":46,"nodeType":"127","messageId":"128","endLine":6,"endColumn":56},{"ruleId":"125","severity":1,"message":"130","line":14,"column":10,"nodeType":"127","messageId":"128","endLine":14,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":15,"column":27,"nodeType":"127","messageId":"128","endLine":15,"endColumn":39},{"ruleId":"125","severity":1,"message":"132","line":23,"column":10,"nodeType":"127","messageId":"128","endLine":23,"endColumn":19},{"ruleId":"125","severity":1,"message":"133","line":24,"column":10,"nodeType":"127","messageId":"128","endLine":24,"endColumn":27},{"ruleId":"125","severity":1,"message":"164","line":28,"column":7,"nodeType":"127","messageId":"128","endLine":28,"endColumn":29},{"ruleId":"125","severity":1,"message":"135","line":64,"column":13,"nodeType":"127","messageId":"128","endLine":64,"endColumn":24},{"ruleId":"125","severity":1,"message":"136","line":66,"column":12,"nodeType":"127","messageId":"128","endLine":66,"endColumn":20},{"ruleId":"125","severity":1,"message":"137","line":66,"column":22,"nodeType":"127","messageId":"128","endLine":66,"endColumn":33},{"ruleId":"125","severity":1,"message":"138","line":67,"column":12,"nodeType":"127","messageId":"128","endLine":67,"endColumn":18},{"ruleId":"125","severity":1,"message":"139","line":69,"column":14,"nodeType":"127","messageId":"128","endLine":69,"endColumn":22},{"ruleId":"140","severity":1,"message":"141","line":206,"column":24,"nodeType":"142","messageId":"143","endLine":206,"endColumn":26},{"ruleId":"125","severity":1,"message":"144","line":281,"column":24,"nodeType":"127","messageId":"128","endLine":281,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":284,"column":8,"nodeType":"147","endLine":284,"endColumn":10,"suggestions":"165"},{"ruleId":"125","severity":1,"message":"149","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":16},{"ruleId":"125","severity":1,"message":"150","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":11},{"ruleId":"125","severity":1,"message":"151","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"152","line":5,"column":18,"nodeType":"127","messageId":"128","endLine":5,"endColumn":21},{"ruleId":"125","severity":1,"message":"126","line":6,"column":20,"nodeType":"127","messageId":"128","endLine":6,"endColumn":26},{"ruleId":"125","severity":1,"message":"153","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":17},{"ruleId":"125","severity":1,"message":"154","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":29},{"ruleId":"125","severity":1,"message":"130","line":9,"column":10,"nodeType":"127","messageId":"128","endLine":9,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":10,"column":27,"nodeType":"127","messageId":"128","endLine":10,"endColumn":39},{"ruleId":"125","severity":1,"message":"155","line":13,"column":8,"nodeType":"127","messageId":"128","endLine":13,"endColumn":12},{"ruleId":"125","severity":1,"message":"132","line":19,"column":10,"nodeType":"127","messageId":"128","endLine":19,"endColumn":19},{"ruleId":"125","severity":1,"message":"133","line":20,"column":10,"nodeType":"127","messageId":"128","endLine":20,"endColumn":27},{"ruleId":"125","severity":1,"message":"156","line":21,"column":8,"nodeType":"127","messageId":"128","endLine":21,"endColumn":21},{"ruleId":"125","severity":1,"message":"134","line":25,"column":7,"nodeType":"127","messageId":"128","endLine":25,"endColumn":12},{"ruleId":"145","severity":1,"message":"157","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":10,"suggestions":"166"},{"ruleId":"159","severity":1,"message":"160","line":90,"column":33,"nodeType":"161","endLine":90,"endColumn":82},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'AccountContext' is defined but never used.","'ownerAddress' is defined but never used.","'Interface' is defined but never used.","'SignerWithAddress' is defined but never used.","'caver' is assigned a value but never used.","'description' is assigned a value but never used.","'provider' is assigned a value but never used.","'setProvider' is assigned a value but never used.","'loaded' is assigned a value but never used.","'onChange' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'fetchEMRs' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getOwnedRecords'. Either include it or remove the dependency array.","ArrayExpression",["169"],"'Record' is defined but never used.","'App' is defined but never used.","'create' is defined but never used.","'get' is defined but never used.","'Web3Modal' is defined but never used.","'WalletConnectProvider' is defined but never used.","'Card' is defined but never used.","'AccordionItem' is defined but never used.","React Hook useEffect has missing dependencies: 'getStaticProps', 'props.date', and 'props.type'. Either include them or remove the dependency array. If 'setRecordDate' needs the current value of 'props.date', you can also switch to useReducer instead of useState and read 'props.date' in the reducer.",["170"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["167"],["168"],"'BAOBAB_TESTNET_RPC_URL' is assigned a value but never used.",["171"],["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"173","fix":"177"},{"desc":"175","fix":"178"},"Update the dependencies array to be: [getOwnedRecords]",{"range":"179","text":"180"},"Update the dependencies array to be: [getStaticProps, props.date, props.type]",{"range":"181","text":"182"},{"range":"183","text":"180"},{"range":"184","text":"182"},[9627,9629],"[getOwnedRecords]",[1660,1662],"[getStaticProps, props.date, props.type]",[9727,9729],[1660,1662]]