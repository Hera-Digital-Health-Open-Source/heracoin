{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n// This file is derived from coinbase-wallet-sdk/packages/wallet-sdk/src/provider/CoinbaseWalletProvider.ts (2022/08/01).\n// Modified for the kaikas-web3-provider development.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KaikasWeb3Provider = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst caver_js_1 = __importDefault(require(\"caver-js\"));\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nclass KaikasWeb3Provider extends safe_event_emitter_1.default {\n  constructor(provider) {\n    super();\n    this._addresses = [];\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._send = this.send.bind(this);\n    this._sendAsync = this.sendAsync.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.enable = this.enable.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this.kaikasProvider = provider;\n    this.chainId = this.getChainId();\n    this.caver = new caver_js_1.default(provider);\n    this.kaikasProvider.on('networkChanged', params => {\n      this.emit('networkChanged', params);\n    });\n    this.kaikasProvider.on('accountsChanged', params => {\n      this.emit('accountsChanged', params);\n    });\n\n    this._subscriptionManager.events.on('notification', notification => {\n      this.emit('message', {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n  }\n\n  enable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._addresses.length > 0) {\n        return [...this._addresses];\n      }\n\n      const res = yield this.kaikasProvider.enable();\n      this._addresses = res;\n      return res;\n    });\n  }\n\n  getChainId() {\n    const chainIdStr = this.kaikasProvider.networkVersion;\n    return chainIdStr;\n  }\n\n  get isKaikas() {\n    return true;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === 'string') {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: '2.0',\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === 'function') {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  sendAsync(request, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is required');\n      } // send(JSONRPCRequest[], callback): void\n\n\n      if (Array.isArray(request)) {\n        const arrayCb = callback;\n\n        this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n        return;\n      } // send(JSONRPCRequest, callback): void\n\n\n      const cb = callback;\n      return this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n    });\n  }\n\n  request(args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!args || typeof args !== 'object' || Array.isArray(args)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n          message: 'Expected a single, non-array, object argument.',\n          data: args\n        });\n      }\n\n      const {\n        method,\n        params\n      } = args;\n\n      if (typeof method !== 'string' || method.length === 0) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n          message: \"'args.method' must be a non-empty string.\",\n          data: args\n        });\n      }\n\n      if (params !== undefined && !Array.isArray(params) && (typeof params !== 'object' || params === null)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n          message: \"'args.params' must be an object or array if provided.\",\n          data: args\n        });\n      }\n\n      const newParams = params === undefined ? [] : params; // Coinbase Wallet Requests\n\n      const res = yield this._sendRequestAsync({\n        method,\n        params: newParams,\n        jsonrpc: '2.0',\n        id: 0\n      });\n      return res.result;\n    });\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: '2.0',\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`Kaikas Wallet does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: '2.0',\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: '2.0',\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => res && resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  _eth_accounts() {\n    return [...this._addresses];\n  }\n\n  _eth_chainId() {\n    return this.getChainId();\n  }\n\n  _net_version() {\n    return parseInt(this.kaikasProvider.networkVersion, 10);\n  }\n\n  _handleAsynchronousMethods(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        method\n      } = request;\n      const params = request.params || [];\n\n      switch (method) {\n        case JSONRPC_1.JSONRPCMethod.personal_sign:\n          return this._personal_sign(params);\n\n        case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n          return this._personal_ecRecover(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n          return this._eth_signTransaction(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n          return this._eth_sendRawTransaction(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n          return this._eth_sendTransaction(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_blockNumber:\n          return this._eth_blockNumber(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_getBlockByNumber:\n          return this._eth_getBlockByNumber(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_getGasPrice:\n          return this._eth_getGasPrice(params);\n\n        case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n          return this._wallet_watchAsset(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_getTransactionReceipt:\n          return this._eth_getTransactionReceipt(params);\n\n        case JSONRPC_1.JSONRPCMethod.eth_call:\n          return this._eth_call(params);\n      }\n\n      return this.kaikasSendAsync(request);\n    });\n  }\n\n  kaikasSendAsync(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.kaikasProvider.sendAsync(request, (err, result) => {\n          if (result.result) {\n            resolve(result);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    });\n  }\n\n  _eth_call(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.kaikasProvider.sendAsync({\n          method: 'klay_call',\n          params: [params[0], params[1]]\n        }, (err, result) => {\n          if (result.result) {\n            resolve(result);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    });\n  }\n\n  _eth_getGasPrice(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.caver.rpc.klay.getGasPrice();\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: result\n      };\n    });\n  }\n\n  _wallet_watchAsset(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = Array.isArray(params) ? params[0] : params;\n      console.log('watch asset', params, request);\n\n      if (!request.type) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n          message: 'Type is required'\n        });\n      }\n\n      if ((request === null || request === void 0 ? void 0 : request.type) !== 'ERC20') {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n          message: `Asset of type '${request.type}' is not supported`\n        });\n      }\n\n      if (!(request === null || request === void 0 ? void 0 : request.options)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n          message: 'Options are required'\n        });\n      }\n\n      if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n          message: 'Address is required'\n        });\n      }\n\n      const {\n        address,\n        symbol,\n        image,\n        decimals\n      } = request.options;\n      const res = yield this.watchAsset(request.type, address, symbol, decimals, image);\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: res\n      };\n    });\n  }\n\n  watchAsset(type, address, symbol, decimals, image) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => {\n        this.kaikasProvider.sendAsync({\n          method: 'wallet_watchAsset',\n          params: {\n            type,\n            options: {\n              address,\n              symbol,\n              decimals,\n              image\n            }\n          }\n        }, (err, result) => {\n          if (result.result) {\n            resolve(!!result.result);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    });\n  }\n\n  _personal_sign(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedMessage = yield this.caver.klay.sign(params[0], params[1]);\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: signedMessage\n      };\n    });\n  }\n\n  _eth_sendTransaction(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        // gas(=gasLimit) is required. Sender, receiver, gas, value are required.\n        // If gasPrice is undefined, eth_sendTransaction calls eth_gasPrice API before sending tx.\n        const res = yield this.caver.klay.sendTransaction(params[0]);\n        return {\n          jsonrpc: '2.0',\n          id: 0,\n          result: res.transactionHash\n        };\n      } catch (err) {\n        if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n          throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User denied transaction signature');\n        }\n\n        throw err;\n      }\n    });\n  }\n\n  _eth_signTransaction(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const res = yield this.caver.klay.signTransaction(params[0]);\n        return {\n          jsonrpc: '2.0',\n          id: 0,\n          result: res\n        };\n      } catch (err) {\n        if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n          throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User denied transaction signature');\n        }\n\n        throw err;\n      }\n    });\n  }\n\n  _eth_sendRawTransaction(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const res = yield this.caver.klay.sendTransaction({\n        senderRawTransaction: params[0],\n        feePayer: this.kaikasProvider.selectedAddress\n      });\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: res.transactionHash\n      };\n    });\n  }\n\n  _eth_getTransactionReceipt(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.caver.rpc.klay.getTransactionReceipt(params[0]);\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: receipt\n      };\n    });\n  }\n\n  _personal_ecRecover(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.caver.utils.recover(params[0], params[1]);\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: address\n      };\n    });\n  }\n\n  _eth_blockNumber(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const blockNumber = yield this.caver.rpc.klay.getBlockNumber();\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: blockNumber\n      };\n    });\n  }\n\n  _eth_getBlockByNumber(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const block = yield this.caver.rpc.klay.getBlockByNumber(params[0], params[1]);\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        result: block\n      };\n    });\n  }\n\n}\n\nexports.KaikasWeb3Provider = KaikasWeb3Provider;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","KaikasWeb3Provider","safe_event_emitter_1","require","JSONRPC_1","eth_rpc_errors_1","caver_js_1","SubscriptionManager_1","default","constructor","provider","_addresses","_subscriptionManager","SubscriptionManager","_send","send","bind","_sendAsync","sendAsync","getChainId","enable","request","kaikasProvider","chainId","caver","on","params","emit","events","notification","type","method","data","length","res","chainIdStr","networkVersion","isKaikas","connected","supportsSubscriptions","disconnect","requestOrMethod","callbackOrParams","Array","isArray","undefined","jsonrpc","id","_sendRequestAsync","callback","requests","map","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","ethErrors","rpc","invalidRequest","message","newParams","_handleSynchronousMethods","syncResult","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","assign","JSONRPCMethod","eth_subscribe","eth_unsubscribe","handleRequest","all","eth_accounts","_eth_accounts","net_version","_net_version","eth_chainId","_eth_chainId","parseInt","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_blockNumber","_eth_blockNumber","eth_getBlockByNumber","_eth_getBlockByNumber","eth_getGasPrice","_eth_getGasPrice","wallet_watchAsset","_wallet_watchAsset","eth_getTransactionReceipt","_eth_getTransactionReceipt","eth_call","_eth_call","kaikasSendAsync","klay","getGasPrice","console","log","invalidParams","options","address","symbol","image","decimals","watchAsset","signedMessage","sign","sendTransaction","transactionHash","match","userRejectedRequest","signTransaction","senderRawTransaction","feePayer","selectedAddress","receipt","getTransactionReceipt","utils","recover","blockNumber","getBlockNumber","block","getBlockByNumber"],"sources":["/Users/austinhatch/Documents/GitHub/HeraCoinOS/herachain-demo/node_modules/@klaytn/kaikas-web3-provider/lib/index.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n// This file is derived from coinbase-wallet-sdk/packages/wallet-sdk/src/provider/CoinbaseWalletProvider.ts (2022/08/01).\n// Modified for the kaikas-web3-provider development.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KaikasWeb3Provider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst caver_js_1 = __importDefault(require(\"caver-js\"));\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nclass KaikasWeb3Provider extends safe_event_emitter_1.default {\n    constructor(provider) {\n        super();\n        this._addresses = [];\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._send = this.send.bind(this);\n        this._sendAsync = this.sendAsync.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.enable = this.enable.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this.kaikasProvider = provider;\n        this.chainId = this.getChainId();\n        this.caver = new caver_js_1.default(provider);\n        this.kaikasProvider.on('networkChanged', (params) => {\n            this.emit('networkChanged', params);\n        });\n        this.kaikasProvider.on('accountsChanged', (params) => {\n            this.emit('accountsChanged', params);\n        });\n        this._subscriptionManager.events.on('notification', (notification) => {\n            this.emit('message', {\n                type: notification.method,\n                data: notification.params,\n            });\n        });\n    }\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._addresses.length > 0) {\n                return [...this._addresses];\n            }\n            const res = yield this.kaikasProvider.enable();\n            this._addresses = res;\n            return res;\n        });\n    }\n    getChainId() {\n        const chainIdStr = this.kaikasProvider.networkVersion;\n        return chainIdStr;\n    }\n    get isKaikas() {\n        return true;\n    }\n    get connected() {\n        return true;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    disconnect() {\n        return true;\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === 'string') {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: '2.0',\n                id: 0,\n                method,\n                params,\n            };\n            return this._sendRequestAsync(request).then((res) => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === 'function') {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map((r) => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof callback !== 'function') {\n                throw new Error('callback is required');\n            }\n            // send(JSONRPCRequest[], callback): void\n            if (Array.isArray(request)) {\n                const arrayCb = callback;\n                this._sendMultipleRequestsAsync(request)\n                    .then((responses) => arrayCb(null, responses))\n                    .catch((err) => arrayCb(err, null));\n                return;\n            }\n            // send(JSONRPCRequest, callback): void\n            const cb = callback;\n            return this._sendRequestAsync(request)\n                .then((response) => cb(null, response))\n                .catch((err) => cb(err, null));\n        });\n    }\n    request(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!args || typeof args !== 'object' || Array.isArray(args)) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                    message: 'Expected a single, non-array, object argument.',\n                    data: args,\n                });\n            }\n            const { method, params } = args;\n            if (typeof method !== 'string' || method.length === 0) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                    message: \"'args.method' must be a non-empty string.\",\n                    data: args,\n                });\n            }\n            if (params !== undefined && !Array.isArray(params) && (typeof params !== 'object' || params === null)) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                    message: \"'args.params' must be an object or array if provided.\",\n                    data: args,\n                });\n            }\n            const newParams = params === undefined ? [] : params;\n            // Coinbase Wallet Requests\n            const res = yield this._sendRequestAsync({\n                method,\n                params: newParams,\n                jsonrpc: '2.0',\n                id: 0,\n            });\n            return res.result;\n        });\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: '2.0',\n            id: request.id,\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`Kaikas Wallet does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: '2.0',\n                        id: request.id,\n                        result: syncResult,\n                    });\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then((res) => resolve({\n                        jsonrpc: '2.0',\n                        id: request.id,\n                        result: res.result,\n                    }))\n                        .catch((err) => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then((res) => res && resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch((err) => reject(err));\n        });\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map((r) => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    _eth_accounts() {\n        return [...this._addresses];\n    }\n    _eth_chainId() {\n        return this.getChainId();\n    }\n    _net_version() {\n        return parseInt(this.kaikasProvider.networkVersion, 10);\n    }\n    _handleAsynchronousMethods(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { method } = request;\n            const params = request.params || [];\n            switch (method) {\n                case JSONRPC_1.JSONRPCMethod.personal_sign:\n                    return this._personal_sign(params);\n                case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                    return this._personal_ecRecover(params);\n                case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                    return this._eth_signTransaction(params);\n                case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                    return this._eth_sendRawTransaction(params);\n                case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                    return this._eth_sendTransaction(params);\n                case JSONRPC_1.JSONRPCMethod.eth_blockNumber:\n                    return this._eth_blockNumber(params);\n                case JSONRPC_1.JSONRPCMethod.eth_getBlockByNumber:\n                    return this._eth_getBlockByNumber(params);\n                case JSONRPC_1.JSONRPCMethod.eth_getGasPrice:\n                    return this._eth_getGasPrice(params);\n                case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n                    return this._wallet_watchAsset(params);\n                case JSONRPC_1.JSONRPCMethod.eth_getTransactionReceipt:\n                    return this._eth_getTransactionReceipt(params);\n                case JSONRPC_1.JSONRPCMethod.eth_call:\n                    return this._eth_call(params);\n            }\n            return this.kaikasSendAsync(request);\n        });\n    }\n    kaikasSendAsync(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.kaikasProvider.sendAsync(request, (err, result) => {\n                    if (result.result) {\n                        resolve(result);\n                    }\n                    else {\n                        reject(err);\n                    }\n                });\n            });\n        });\n    }\n    _eth_call(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.kaikasProvider.sendAsync({\n                    method: 'klay_call',\n                    params: [params[0], params[1]],\n                }, (err, result) => {\n                    if (result.result) {\n                        resolve(result);\n                    }\n                    else {\n                        reject(err);\n                    }\n                });\n            });\n        });\n    }\n    _eth_getGasPrice(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.caver.rpc.klay.getGasPrice();\n            return { jsonrpc: '2.0', id: 0, result: result };\n        });\n    }\n    _wallet_watchAsset(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = (Array.isArray(params) ? params[0] : params);\n            console.log('watch asset', params, request);\n            if (!request.type) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                    message: 'Type is required',\n                });\n            }\n            if ((request === null || request === void 0 ? void 0 : request.type) !== 'ERC20') {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                    message: `Asset of type '${request.type}' is not supported`,\n                });\n            }\n            if (!(request === null || request === void 0 ? void 0 : request.options)) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                    message: 'Options are required',\n                });\n            }\n            if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                    message: 'Address is required',\n                });\n            }\n            const { address, symbol, image, decimals } = request.options;\n            const res = yield this.watchAsset(request.type, address, symbol, decimals, image);\n            return { jsonrpc: '2.0', id: 0, result: res };\n        });\n    }\n    watchAsset(type, address, symbol, decimals, image) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                this.kaikasProvider.sendAsync({\n                    method: 'wallet_watchAsset',\n                    params: {\n                        type,\n                        options: {\n                            address,\n                            symbol,\n                            decimals,\n                            image,\n                        },\n                    },\n                }, (err, result) => {\n                    if (result.result) {\n                        resolve(!!result.result);\n                    }\n                    else {\n                        reject(err);\n                    }\n                });\n            });\n        });\n    }\n    _personal_sign(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signedMessage = yield this.caver.klay.sign(params[0], params[1]);\n            return { jsonrpc: '2.0', id: 0, result: signedMessage };\n        });\n    }\n    _eth_sendTransaction(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // gas(=gasLimit) is required. Sender, receiver, gas, value are required.\n                // If gasPrice is undefined, eth_sendTransaction calls eth_gasPrice API before sending tx.\n                const res = yield this.caver.klay.sendTransaction(params[0]);\n                return { jsonrpc: '2.0', id: 0, result: res.transactionHash };\n            }\n            catch (err) {\n                if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                    throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User denied transaction signature');\n                }\n                throw err;\n            }\n        });\n    }\n    _eth_signTransaction(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const res = yield this.caver.klay.signTransaction(params[0]);\n                return { jsonrpc: '2.0', id: 0, result: res };\n            }\n            catch (err) {\n                if (typeof err.message === 'string' && err.message.match(/(denied|rejected)/i)) {\n                    throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest('User denied transaction signature');\n                }\n                throw err;\n            }\n        });\n    }\n    _eth_sendRawTransaction(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.caver.klay.sendTransaction({\n                senderRawTransaction: params[0],\n                feePayer: this.kaikasProvider.selectedAddress,\n            });\n            return { jsonrpc: '2.0', id: 0, result: res.transactionHash };\n        });\n    }\n    _eth_getTransactionReceipt(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.caver.rpc.klay.getTransactionReceipt(params[0]);\n            return { jsonrpc: '2.0', id: 0, result: receipt };\n        });\n    }\n    _personal_ecRecover(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.caver.utils.recover(params[0], params[1]);\n            return { jsonrpc: '2.0', id: 0, result: address };\n        });\n    }\n    _eth_blockNumber(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const blockNumber = yield this.caver.rpc.klay.getBlockNumber();\n            return { jsonrpc: '2.0', id: 0, result: blockNumber };\n        });\n    }\n    _eth_getBlockByNumber(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const block = yield this.caver.rpc.klay.getBlockByNumber(params[0], params[1]);\n            return { jsonrpc: '2.0', id: 0, result: block };\n        });\n    }\n}\nexports.KaikasWeb3Provider = KaikasWeb3Provider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}